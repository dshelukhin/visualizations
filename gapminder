# -*- coding: utf-8 -*-
"""
Gapminder Chart with Bokeh

bokeh serve --show gapminder.py

Interactive Legends features currently work on “per-glyph” style legends.
Legends that are created by specifying a column to automatically group
do not yet support interactive features.
http://bokeh.pydata.org/en/latest/docs/user_guide/annotations.html#interactive-legends
"""

import os

from bokeh.io import curdoc
from bokeh.models import ColumnDataSource, CategoricalColorMapper, Slider, Select, HoverTool
from bokeh.plotting import figure
from bokeh.layouts import widgetbox, row
from bokeh.palettes import Spectral6

import pandas as pd

os.chdir('C:\\Users\\Dmytro\\Desktop\\Python\\Interactive Data Visualization with Bokeh')
print(os.getcwd())

data = pd.read_csv('gapminder_tidy.csv', index_col=1)

# Make the ColumnDataSource
source = ColumnDataSource(data={
    'x'       : data.loc[1970].fertility,
    'y'       : data.loc[1970].life,
    'country'      : data.loc[1970].Country,
    'pop'      : (data.loc[1970].population / 20000000) + 2,
    'region'      : data.loc[1970].region,
})

# Save the minimum and maximum values of the fertility column
xmin, xmax = min(data.fertility), max(data.fertility)

# Save the minimum and maximum values of the life expectancy column
ymin, ymax = min(data.life), max(data.life)

# Create the figure: plot
plot = figure(title='Gapminder Data for 1970', plot_height=500, plot_width=800,
              x_range=(xmin, xmax), y_range=(ymin, ymax))

# Set the axis labels
plot.xaxis.axis_label ='Fertility (children per woman)'
plot.yaxis.axis_label = 'Life Expectancy (years)'

# Make a list of the unique values from the region column
regions_list = data.region.unique().tolist()

# Make a color mapper
color_mapper = CategoricalColorMapper(factors=regions_list, palette=Spectral6)

# Add circle glyphs and the color mapper to the plot
plot.circle(x='x', y='y', fill_alpha=0.8, size=5, source=source,
            color=dict(field='region', transform=color_mapper), legend='region')

# Set the legend attributes of the plot 
plot.legend.location = 'bottom_left' #top_right'
#plot.legend.click_policy="hide" #not yet supported for automatic legends
plot.legend.background_fill_alpha = 0.6
plot.legend.label_text_font_size = '8pt'
plot.legend.label_standoff = 5
#plot.legend.glyph_height = 20
plot.legend.spacing = 1
plot.legend.padding = 2
plot.legend.margin = 2
    
# Define the callback: update_plot
def update_plot(attr, old, new):
    # Read the current value off the slider and 2 dropdowns
    yr = slider.value
    x = x_select.value
    y = y_select.value
    # Label axes of plot
    plot.xaxis.axis_label = x
    plot.yaxis.axis_label = y
    # Set new_data
    new_data = {
        'x'       : data.loc[yr][x],
        'y'       : data.loc[yr][y],
        'country' : data.loc[yr].Country,
        'pop'     : (data.loc[yr].population / 20000000) + 2,
        'region'  : data.loc[yr].region,
    }
    # Assign new_data to source.data
    source.data = new_data

    # Set the range of all axes
    plot.x_range.start = min(data[x])
    plot.x_range.end = max(data[x])
    plot.y_range.start = min(data[y])
    plot.y_range.end = max(data[y])

    # Add title to plot
    plot.title.text = 'Gapminder data for %d' % yr

# Make a slider object and attach the callback to the 'value' property of slider
slider = Slider(start = 1970, end = 2010, step = 1, value = 1970, title = 'Year')
slider.on_change('value', update_plot)

# Create a dropdown Select widget for the x and y data
x_select = Select(
    options=['fertility', 'life', 'child_mortality', 'gdp'],
    value='fertility',
    title='x-axis data'
)

y_select = Select(
    options=['fertility', 'life', 'child_mortality', 'gdp'],
    value='life',
    title='y-axis data'
)

# Attach the update_plot callback to the 'value' property of x_select and y_select
x_select.on_change('value', update_plot)
y_select.on_change('value', update_plot)

# Create a HoverTool and it to the plot
hover = HoverTool(tooltips=[('Country', '@country')])
plot.add_tools(hover)

# Create layout and add to current document
layout = row(widgetbox(slider, x_select, y_select), plot)
curdoc().add_root(layout)
